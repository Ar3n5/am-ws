apiVersion: v1
kind: Service
metadata:
  name: am-postgres
  namespace: am-web
spec:
  selector:
    app: am-postgres
  ports:
    - name: pg
      port: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: am-postgres-hl
  namespace: am-web
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: am-postgres
  ports:
    - name: pg
      port: 5432
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: am-postgres
  namespace: am-web
spec:
  serviceName: am-postgres-hl
  replicas: 1
  selector:
    matchLabels: { app: am-postgres }
  template:
    metadata: { labels: { app: am-postgres } }
    spec:
      volumes:
        - name: init-sql
          configMap:
            name: am-postgres-init
            items:
              - key: 00-init.sql
                path: 00-init.sql
      containers:
        - name: postgres
          image: postgres:16
          ports: [{ containerPort: 5432, name: pg }]
          env:
            - name: POSTGRES_PASSWORD
              value: amroot
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: init-sql
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
          readinessProbe:
            tcpSocket: { port: pg }
            initialDelaySeconds: 5
            periodSeconds: 5
  volumeClaimTemplates:
    - metadata: { name: data }
      spec:
        accessModes: ["ReadWriteOnce"]
        resources: { requests: { storage: 8Gi } }


